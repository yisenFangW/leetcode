你需要采用前序遍历的方式，将一个二叉树转换成一个由括号和整数组成的字符串。

空节点则用一对空括号 "()" 表示。而且你需要省略所有不影响字符串与原始二叉树之间的一对一映射关系的空括号对。

示例 1:

输入: 二叉树: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     

输出: "1(2(4))(3)"

解释: 原本将是“1(2(4)())(3())”，
在你省略所有不必要的空括号对之后，
它将是“1(2(4))(3)”。
示例 2:

输入: 二叉树: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 

输出: "1(2()(4))(3)"

解释: 和第一个示例相似，
除了我们不能省略第一个对括号来中断输入和输出之间的一对一映射关系。

题解：
//判断括号的作用，是在每次加数之前，加一个左括号，然后在树没有子节点的时候，加上一个右括号，其中有一个特殊的场景，就是左子树没有，右子树有
//这个要在字符串的里面加上一对空括号。
//这个套括号，应该是在递归的时候，判断条件设置左右括号，但是我在写的时候，不知道改咋么写；
//在加入数字之前要加个左括号，然后加入数字之后，也就是结束之后，要加右括号，所以左括号在第一句
//右括号在最后一句，
void helper(TreeNode* t, string& res){
    if(!t) return;
    res += "(" +to_string(t->val);
    if(!t->left && t->right) res += "()";
    helper(t->left, res);
    helper(t->right, res);
    res += ")";
}

string tree2str(TreeNode* t) {
    if(!t) return "";
    string res = "";
    helper(t, res);
    return string(res.begin()+1, res.end()-1);
}
