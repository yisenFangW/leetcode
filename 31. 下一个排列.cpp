实现获取下一个排列的函数，算法需要将给定数字序列重新排列成字典序中下一个更大的排列。

如果不存在下一个更大的排列，则将数字重新排列成最小的排列（即升序排列）。

必须原地修改，只允许使用额外常数空间。

以下是一些例子，输入位于左侧列，其相应输出位于右侧列。
1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1

题解：
//这题开始拿到后，毫无想法，不知道改怎么换位置，换方向之类的，看了别人的题解，才知道一点思路，但是写起来的时候，还是被异常情况给
//搞的有点懵逼，主要是代码的健壮性不好；
//思路：
//这道题让我们求下一个排列顺序，由题目中给的例子可以看出来，如果给定数组是降序，则说明是全排列的最后一种情况，
//则下一个排列就是最初始情况，可以参见之前的博客 Permutations。我们再来看下面一个例子，有如下的一个数组
//1　　2　　7　　4　　3　　1
//下一个排列为：
//1　　3　　1　　2　　4　　7
//那么是如何得到的呢，我们通过观察原数组可以发现，如果从末尾往前看，数字逐渐变大，到了2时才减小的，
//然后我们再从后往前找第一个比2大的数字，是3，那么我们交换2和3，再把此时3后面的所有数字转置一下即可，步骤如下：
//1　　2　　7　　4　　3　　1
//1　　2　　7　　4　　3　　1
//1　　3　　7　　4　　2　　1
//1　　3　　1　　2　　4　　7

void nextPermutation(vector<int>& nums) {
    if(nums.empty())
        return;
    int i = nums.size()-1;
    for(;i>0;--i){
        if(nums[i] > nums[i-1])
            break;
    }
    int j = nums.size()-1;
    for(;j>i&&i!=0;j--)
        if(nums[j] > nums[i-1])
            break;
    if(i!=0)
        swap(nums[i-1], nums[j]);
    reverse(nums.begin(), nums.end());
}
