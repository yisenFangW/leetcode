这里有 d 个一样的骰子，每个骰子上都有 f 个面，分别标号为 1, 2, ..., f。

我们约定：掷骰子的得到总点数为各骰子面朝上的数字的总和。

如果需要掷出的总点数为 target，请你计算出有多少种不同的组合情况（所有的组合情况总共有 f^d 种），模 10^9 + 7 后返回。

 

示例 1：

输入：d = 1, f = 6, target = 3
输出：1
示例 2：

输入：d = 2, f = 6, target = 7
输出：6
示例 3：

输入：d = 2, f = 5, target = 10
输出：1
示例 4：

输入：d = 1, f = 2, target = 3
输出：0
示例 5：

输入：d = 30, f = 30, target = 500
输出：222616187
 

提示：

1 <= d, f <= 30
1 <= target <= 1000

题解：
//这题是在周赛的时候遇到的题，但是当时遇到了之后，并没有什么思路，感觉好像是用动态规划写，但是也没动手，就没写过啦
//这题其实还是蛮有难度的，因为转移方程建立不是很好找；看的别人的题解：

//这题能想到是用动态规划解，但是具体怎么做就不知道了
//主要是转移方程怎么找，dp[i][j] = dp[i-1][j-k]  k>=1&&k<=f
//所以dp[i][j] = dp[i-1][j-1] + dp[i-1][j-2] +...+ dp[i-1][j-k]
//所以题解就是那样啊，动态规划求解；
//处以mod比较巧妙啊，没见过这种写法的，怕int超过范围？
    
#define mod 1000000007
int numRollsToTarget(int d, int f, int target) {
    //既然是定长的，用数组的速度会快于用vetor的；
    int dp[d+1][target+1];
    //数组初始化
    memset(dp, 0, sizeof(dp));
    for(int i=1;i<=f&&i<=target;i++) dp[1][i] = 1;
    for(int i=2;i<=d;i++) {
        for(int j=1;j<=target;j++) {
            for(int k=1;k<=f&&j>=k;k++) {
                dp[i][j] = (dp[i][j]+dp[i-1][j-k])%mod;
            }
        }
    }
    return dp[d][target];
}
