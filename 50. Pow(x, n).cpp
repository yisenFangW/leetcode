实现 pow(x, n) ，即计算 x 的 n 次幂函数。

示例 1:

输入: 2.00000, 10
输出: 1024.00000
示例 2:

输入: 2.10000, 3
输出: 9.26100
示例 3:

输入: 2.00000, -2
输出: 0.25000
解释: 2-2 = 1/22 = 1/4 = 0.25
说明:

-100.0 < x < 100.0
n 是 32 位有符号整数，其数值范围是 [−231, 231 − 1] 。

//题解：
//1.第一想法肯定是在n的范围内，一个一个乘于x，但是这样也太慢了，肯定是通不过的；
//想怎么优化这个程序，没有太想明白，看了别人的题解：
// 注意思想，他是判断n是否能被2整除，如果整除，就让x乘自己，如果是不能整除，则让res*x;
// 因为如果n不为0的话，都会变成1的，所以最后res还是会乘上x;
// 这题的思想值得借鉴啊
class Solution {
public:
    double myPow(double x, int n) {
        double res = 1.0;
        for(int i=n;i!=0;i/=2){
            if(i%2!=0) res*=x;
            x*=x;
        }
        return n<0?1/res:res;
    }
};

